The function returns true if n is a power of 2. The function doesnt stop calling itself because it is recursive and it does not have a statement to return false if the n is not a power of 2. Each time the function is called, if it is not a power of 2, n is reduced by 1/2 and the result is the new value of n. When aa statment is added to return n as false if it is not a power of 2, it will stop calling itself.


Post mortem debugger finished. The recursive.py will be restarted
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(1)<module>()
-> import sys
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(3)<module>()
-> def my_fun(n):
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(9)<module>()
-> if __name__ == '__main__':
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(10)<module>()
-> n= int(sys.argv[1])
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(11)<module>()
-> print(my_fun(n))
(Pdb) s
--Call--
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(4)my_fun()
-> if n ==2:
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) pp n
15
(Pdb) s
--Call--
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) pp n
7
(Pdb) n
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(4)my_fun()
-> if n ==2:
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) pp n
3
(Pdb) n
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(4)my_fun()
-> if n ==2:
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(4)my_fun()
-> if n ==2:
(Pdb) s
> /Users/jayjones/Desktop/UW/SP_Online_Course2_2018/students/TerranceJ/lesson5/recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) pp n
1
(Pdb) 
