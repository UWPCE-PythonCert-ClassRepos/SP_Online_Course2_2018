The problem with the recursion logic is that the stopping condition is only met if the original input is a factor of two. If this is the case, the input will be halved at each step and eventually equal 2, at which point the stopping condition will be met and the function will return True. If the input is not a factor of 2, the stopping condition will never be met and the stack will keep growing until an error occurs. The value of n will approach zero as the function gets deeper and deeper into recursion. For the function to work properly, we should add another stopping condition that retuns False, if n<2 or if n%2 != 0 or something similar.

I'm pasting below the log file which steps through the program using a starting value of n=15.

C:\Users\kuhnb\pythoncourse2\SP_Online_Course2_2018\students\kuhnbt\lesson5>python -m pdb recursive.py 15
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(1)<module>()
-> import sys
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(3)<module>()
-> def my_fun(n):
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(9)<module>()
-> if __name__ == '__main__':
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(10)<module>()
-> n = int(sys.argv[1])
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(11)<module>()
-> print(my_fun(n))
(Pdb) s
--Call--
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) s
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(4)my_fun()
-> if n == 2:
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) p n
15
(Pdb) n
Traceback (most recent call last):
  File "C:\Users\kuhnb\Anaconda3\lib\pdb.py", line 1667, in main
    pdb._runscript(mainpyfile)
  File "C:\Users\kuhnb\Anaconda3\lib\pdb.py", line 1548, in _runscript
    self.run(statement)
  File "C:\Users\kuhnb\Anaconda3\lib\bdb.py", line 431, in run
    exec(cmd, globals, locals)
  File "<string>", line 1, in <module>
  File "c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py", line 11, in <module>
    print(my_fun(n))
  File "c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py", line 7, in my_fun
    return my_fun(n/2)
  File "c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py", line 7, in my_fun
    return my_fun(n/2)
  File "c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py", line 7, in my_fun
    return my_fun(n/2)
  [Previous line repeated 980 more times]
  File "c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py", line 3, in my_fun
    def my_fun(n):
  File "C:\Users\kuhnb\Anaconda3\lib\bdb.py", line 50, in trace_dispatch
    return self.dispatch_call(frame, arg)
  File "C:\Users\kuhnb\Anaconda3\lib\bdb.py", line 76, in dispatch_call
    if not (self.stop_here(frame) or self.break_anywhere(frame)):
  File "C:\Users\kuhnb\Anaconda3\lib\bdb.py", line 173, in break_anywhere
    return self.canonic(frame.f_code.co_filename) in self.breaks
  File "C:\Users\kuhnb\Anaconda3\lib\bdb.py", line 29, in canonic
    if filename == "<" + filename[1:-1] + ">":
RecursionError: maximum recursion depth exceeded in comparison
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> c:\users\kuhnb\anaconda3\lib\bdb.py(29)canonic()
-> if filename == "<" + filename[1:-1] + ">":
(Pdb) l
 24             self.breaks = {}
 25             self.fncache = {}
 26             self.frame_returning = None
 27
 28         def canonic(self, filename):
 29  ->         if filename == "<" + filename[1:-1] + ">":
 30                 return filename
 31             canonic = self.fncache.get(filename)
 32             if not canonic:
 33                 canonic = os.path.abspath(filename)
 34                 canonic = os.path.normcase(canonic)
(Pdb) step
Post mortem debugger finished. The recursive.py will be restarted
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(1)<module>()
-> import sys
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(3)<module>()
-> def my_fun(n):
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(9)<module>()
-> if __name__ == '__main__':
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(10)<module>()
-> n = int(sys.argv[1])
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(11)<module>()
-> print(my_fun(n))
(Pdb) s
--Call--
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) s
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(4)my_fun()
-> if n == 2:
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(4)my_fun()
-> if n == 2:
(Pdb) p n
7.5
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(4)my_fun()
-> if n == 2:
(Pdb) p n
3.75
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(4)my_fun()
-> if n == 2:
(Pdb) p n
1.875
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(7)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(3)my_fun()
-> def my_fun(n):
(Pdb) n
> c:\users\kuhnb\pythoncourse2\sp_online_course2_2018\students\kuhnbt\lesson5\recursive.py(4)my_fun()
-> if n == 2:
(Pdb) p n
0.9375
(Pdb)










