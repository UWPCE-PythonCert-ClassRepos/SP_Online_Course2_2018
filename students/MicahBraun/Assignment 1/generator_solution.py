# ----------------------------------------------------------------------------------------------------------------------
# AUTHOR: Micah Braun
# PROJECT NAME: generator_solution.py
# DATE CREATED: 08/24/2018
# UPDATED: 
# PURPOSE: Lesson 01: test_generator.py facilitator file
# DESCRIPTION: Code within this file is a facilitator to the test file test_generator.py which tests the generator's
# values for validity. File includes 4 functions: intsum(), doubler(), fib(), and prime(); each function performs a
# duty that corresponds to its name. intsum() runs through statements containing values and for each value encountered
# adds that value to its sum variable (totaling up values as it goes down). doubler() behaves similarly, but instead
# of adding to a sum, from the starting value will go on to double a given number's value. fib() cycles through a
# range of numbers (in this case 9) and generates the fibonacci sequence up to the range. prime() generates all prime
# numbers up to an upper-limit (in this case 100) and saves the primes to a list.
# ----------------------------------------------------------------------------------------------------------------------

#  ==============================================    SET UP    ========================================================
# No imports
#  ====================================================================================================================

#  =============================================    PROCESSING    =====================================================


def intsum():
	sums = 0										# holds sum total
	count = 0										# counter -> move forward
	while True:										# loop through values until False
		sums += count								# sum is equal to itself and whatever value is in next index
		count += 1									# move index forward
		yield sums									# yield sum


def doubler():
	dubs = 1										# double container (starts at one - 0 * 2 == 0)
	while True:										# loop through values until False
		yield dubs									# yield value in dubs
		dubs *= 2									# dubs now increases to itself * 2


def fib():
	left, right = 1, 1								# left index, right index start set both to 1 (1, 1)
	while True:										# loop through values until False
		for i in range(9):							# for each value from 1 to 9 (stops at index 8)
			yield left								# yield value stored in left variable :: yield x of (x, y)
			left, right = right, left + right		# left now = value from right, right now = left + right


def prime():
	# primes_to_n = []										# Container for primes, not used or needed now
	for num in range(2, 100 + 1):							# for each value from start : end of range
		is_prime = True										# set boolean variable is_prime = True
		for divisor in range(2, int(num ** 0.5) + 1):		# for each value from start : sqrt of num
			if num % divisor == 0:							# if num / divisor has no remainder
				is_prime = False							# it is not prime
				break										# break, to avoid redundant checks, start next
		if is_prime:										# if is_prime is True for a value
			# primes_to_n.append(num)						# add that value to the primes list
			yield num										# yield the value for checking
#  ====================================================================================================================

#  ===============================================    OUT-PUT    ======================================================
# Output generated by test_generator.py
#  ====================================================================================================================
